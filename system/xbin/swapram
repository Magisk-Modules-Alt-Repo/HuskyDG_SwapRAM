#!/system/bin/sh
FILE="$0"; NAME="$1"; VALUE="$2"; MODID="/data/adb/modules/huskydg_swapram"; VX="$@"
abort(){ echo "$1"; exit 1; }

abort_rm(){ rm -rf $MODID/swap; abort "$1";  }

mod_prop(){ (
NAME=$1; VARPROP=$2; FILE="$3"; [ ! "$FILE" ] && FILE="$MODID/swap.prop"; no=/dev/null
if [ "$NAME" ] && [ ! "$NAME" == "=" ]; then
touch "$FILE" 2>$no
echo "$NAME=$VARPROP" | while read prop; do export newprop=$(echo ${prop} | cut -d '=' -f1); sed -i "/${newprop}/d" "$FILE"; cat="$(cat "$FILE")"; echo $prop > "$FILE"; echo -n "$cat" >>"$FILE"; done 2>$no
else
echo "Change property of a file\nusage: mod_prop NAME VALUE FILE"
fi
) }

del_prop(){ (
NAME=$1; FILE="$2"; [ ! "$FILE" ] && FILE=$MODID/swap.prop
noneprop="$NAME="
nonepropn="$noneprop\n"
if [ "$NAME" ] && [ ! "$NAME" == "=" ]; then
sed -i "/${nonepropn}/d" "$FILE" 2>/dev/null
sed -i "/${noneprop}/d" "$FILE" 2>/dev/null
else
echo "Delete property from a file\nusage: del_prop NAME FILE"
fi
) }

grep_prop() {
  local REGEX="s/^$1=//p"
  shift
  local FILES=$@
  [ -z "$FILES" ] && FILES='/system/build.prop'
  cat $FILES 2>/dev/null | dos2unix | sed -n "$REGEX" | head -n 1
}

isnumber(){ (
value=$1; 
expr "$value" + 0 &>/dev/null; 
) }

is_size(){ (
value=$1; lengthx=`expr ${#value} - 1`; lastchar=${value: -1}; valuex=${value: 0: $lengthx}
# echo "$value  - ${#value} -  $lengthx  -  $lastchar  -  $valuex"
( [ "$lastchar" == "G" -o "$lastchar" == "M" -o "$lastchar" == "k" ] && isnumber $valuex ) && return 0
isnumber $value && return 0
return 1
) }

zram_set(){ (
VALUE_SET=$1
[ -f "/sys/block/zram0/disksize" ] || abort "You kernel might not support ZRAM swap!"
echo "- Set ZRAM size: $VALUE_SET"
echo $VALUE_SET >/sys/block/zram0/disksize || abort "Cannot set ZRAM!"
mkswap /dev/block/zram0 &>/dev/null
swapon  /dev/block/zram0 || abort "Cannot create swap!"
mod_prop ZRAM_SWAP "$VALUE_SET"
echo "- Success!"
) }


swap_on(){
COUNT="$1"
echo "- Disable swap if it is enabled..."
swapoff $MODID/swap
rm -rf $MODID/swap || abort "Cannot remove swap!"
echo "- Create $COUNT GB swap file..."
COUNT_KB=$(expr $COUNT \* 1000000)
dd if=/dev/zero of="$MODID/swap" bs=1024 count=$COUNT_KB &>/dev/null
echo "- Enable swap..."
mkswap $MODID/swap &>/dev/null
swapon $MODID/swap || abort_rm "Cannot create swap!"
mod_prop ENABLE_SWAP true
echo "- Swap RAM has been enabled"
}


main(){
MAGISKPATH=$(magisk --path) || abort "No Magisk found!"
export PATH=$MAGISKPATH/.magisk/busybox:$MAGISKPATH
case "$NAME" in
 "add" )
isnumber "$VALUE" && swap_on "$VALUE" 2>/dev/null || abort "Value must be a number!"
;;
 "remove" )
echo "- Disable swap if it is enabled..."
swapoff $MODID/swap
echo "- Remove swap file..."
rm -rf $MODID/swap || abort "Cannot remove swap!"
mod_prop ENABLE_SWAP false
echo "- Swap RAM has been disabled"
;;
 "zram" )
if is_size "$VALUE"; then
zram_set "$VALUE" 2>/dev/null
else
abort "Invaild argument!\nIt must be like this: 1024M, 12000k, 2G, 2147483648"
fi
;;
 "status" )
[ "$(grep_prop ENABLE_SWAP $MODID/swap.prop 2>/dev/null)" == "true" ] && echo "Swap RAM add: `du -shH $MODID/swap | awk '{ print $1 }'`" 2>/dev/null || echo "Swap RAM add: 0"
[ -f "/sys/block/zram0/disksize" ] && echo "ZRAM size: `cat /sys/block/zram0/disksize`" || echo "You kernel might not support ZRAM swap!"
;;
 * )
echo "Magisk Swap RAM by HuskyDG\nusage: swapram [NAME] [VALUE]\n\nNAME properties:\n  status            - Show Swap RAM status\n  add [VALUE]       - create and add Swap RAM with amount of GB\n  remove            - disable and remove Swap RAM file\n  zram [VALUE]      - create and add Swap RAM using ZRAM"
esac

}

## if user is not "root", re exec with su magisk

[ "$(id -u)" != "0" ] && exec su -m -c "$FILE" || main
